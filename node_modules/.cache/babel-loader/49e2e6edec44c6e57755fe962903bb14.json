{"ast":null,"code":"var _jsxFileName = \"/Users/recepteksan/Code/_Test/_React/ReactTutorial/reactweatherapi/src/components/Weather30Days.js\";\nimport React, { Component } from 'react';\nimport weatherConfig from '../config/config';\nlet myData = [];\nlet getCityName = '';\n\nclass Weather30Days extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherFetchData: [],\n      myCityName: '',\n      api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n      apiKey: weatherConfig.weatherData.weatherAPI.apiKey,\n      imageURL: weatherConfig.weatherData.weatherAPI.imageURL,\n      isDataOK: false\n    };\n  }\n\n  get30DaysWeather() {\n    const cityID = this.props.cityID;\n\n    if (cityID != \"\") {\n      const _this$state = this.state,\n            api30DaysURL = _this$state.api30DaysURL,\n            apiKey = _this$state.apiKey;\n      let fetchURL = api30DaysURL + \"?id=\" + cityID + \"&appid=\" + apiKey;\n      fetch(fetchURL).then(response => {\n        return response.json();\n      }).then(response => {\n        getCityName = response.city.name;\n        return response.list;\n      }).then(response => {\n        this.setState({\n          weatherFetchData: response,\n          myCityName: getCityName,\n          isDataOK: true\n        });\n      }).catch(err => {\n        console.log('Bir hata oluştu.' + err);\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.get30DaysWeather();\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          myCityName = _this$state2.myCityName,\n          isDataOK = _this$state2.isDataOK;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12 mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, isDataOK ? '' : ''));\n  }\n\n}\n\nexport default Weather30Days;","map":{"version":3,"sources":["/Users/recepteksan/Code/_Test/_React/ReactTutorial/reactweatherapi/src/components/Weather30Days.js"],"names":["React","Component","weatherConfig","myData","getCityName","Weather30Days","constructor","props","state","weatherFetchData","myCityName","api30DaysURL","weatherData","weatherAPI","apiKey","imageURL","isDataOK","get30DaysWeather","cityID","fetchURL","fetch","then","response","json","city","name","list","setState","catch","err","console","log","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,IAAIC,MAAM,GAAE,EAAZ;AACA,IAAIC,WAAW,GAAE,EAAjB;;AACA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAElCK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACRC,MAAAA,gBAAgB,EAAE,EADV;AAERC,MAAAA,UAAU,EAAE,EAFJ;AAGRC,MAAAA,YAAY,EAAET,aAAa,CAACU,WAAd,CAA0BC,UAA1B,CAAqCF,YAH3C;AAIRG,MAAAA,MAAM,EAAEZ,aAAa,CAACU,WAAd,CAA0BC,UAA1B,CAAqCC,MAJrC;AAKRC,MAAAA,QAAQ,EAAEb,aAAa,CAACU,WAAd,CAA0BC,UAA1B,CAAqCE,QALvC;AAMRC,MAAAA,QAAQ,EAAE;AANF,KAAZ;AAQH;;AAEDC,EAAAA,gBAAgB,GAAE;AAAA,UACPC,MADO,GACG,KAAKX,KADR,CACPW,MADO;;AAEd,QAAGA,MAAM,IAAI,EAAb,EACA;AAAA,0BACkC,KAAKV,KADvC;AAAA,YACUG,YADV,eACUA,YADV;AAAA,YACwBG,MADxB,eACwBA,MADxB;AAEI,UAAIK,QAAQ,GAAER,YAAY,GAAG,MAAf,GAAwBO,MAAxB,GAAiC,SAAjC,GAA6CJ,MAA3D;AAEAM,MAAAA,KAAK,CAACD,QAAD,CAAL,CAAgBE,IAAhB,CAAsBC,QAAD,IAAc;AAC/B,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,OAFD,EAEGF,IAFH,CAESC,QAAD,IAAc;AAClBlB,QAAAA,WAAW,GAAEkB,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AACA,eAAOH,QAAQ,CAACI,IAAhB;AACH,OALD,EAKGL,IALH,CAKSC,QAAD,IAAc;AAClB,aAAKK,QAAL,CAAc;AACVlB,UAAAA,gBAAgB,EAAEa,QADR;AAEVZ,UAAAA,UAAU,EAAEN,WAFF;AAGVY,UAAAA,QAAQ,EAAE;AAHA,SAAd;AAKH,OAXD,EAWGY,KAXH,CAWUC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,GAAjC;AACH,OAbD;AAcH;AACF;;AAEDG,EAAAA,kBAAkB,GAAE;AAChB,SAAKf,gBAAL;AACH;;AAEHgB,EAAAA,MAAM,GAAG;AAAA,yBAC0B,KAAKzB,KAD/B;AAAA,UACEE,UADF,gBACEA,UADF;AAAA,UACcM,QADd,gBACcA,QADd;AAEL,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,QAAQ,GAAG,EAAH,GAAQ,EADrB,CADJ,CADJ;AAOH;;AAnDiC;;AAsDtC,eAAeX,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport weatherConfig from '../config/config'\n\nlet myData= [];\nlet getCityName= '';\nclass Weather30Days extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state= {\n            weatherFetchData: [],\n            myCityName: '',\n            api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n            apiKey: weatherConfig.weatherData.weatherAPI.apiKey,\n            imageURL: weatherConfig.weatherData.weatherAPI.imageURL,\n            isDataOK: false,\n        }\n    }\n\n    get30DaysWeather(){\n        const {cityID} = this.props;\n        if(cityID != \"\")\n        {\n            const{api30DaysURL, apiKey} = this.state;\n            let fetchURL= api30DaysURL + \"?id=\" + cityID + \"&appid=\" + apiKey; \n            \n            fetch(fetchURL).then((response) => {\n                return response.json();\n            }).then((response) => {\n                getCityName= response.city.name;\n                return response.list;\n            }).then((response) => {\n                this.setState({\n                    weatherFetchData: response,\n                    myCityName: getCityName,\n                    isDataOK: true\n                  });\n            }).catch((err) => {\n                console.log('Bir hata oluştu.' + err);\n            });  \n        }\n      }\n\n      componentDidUpdate(){\n          this.get30DaysWeather();\n      }\n    \n    render() {\n        const {myCityName, isDataOK} = this.state;\n        return (\n            <React.Fragment>\n                <div className=\"col-12 mt-5\">\n                    {isDataOK ? '' : ''}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Weather30Days;\n"]},"metadata":{},"sourceType":"module"}