{"version":3,"sources":["config/config.js","components/Weather30Days.js","components/WeatherBox.js","App.js","serviceWorker.js","index.js"],"names":["weatherConfig","weatherData","weatherAPI","apiURL","api30DaysURL","apiKey","imageURL","weatherCities","getCityName","Weather30Days","props","state","weatherFetchData","myCityName","isDataOK","cityID","this","fetch","then","response","json","city","name","list","setState","catch","err","console","log","get30DaysWeather","myDate","formatDate","Date","myDay","getDate","myMonth","getMonth","getFullYear","myTemp","toString","length","formatTemp","substr","Fragment","className","map","item","index","key","src","weather","icon","setFormatDate","dt","setFormatTemp","temp","day","max","min","humidity","speed","clouds","Component","WeatherBox","main","temp_max","temp_min","wind","all","onClick","id","myData","App","cities","weather30DayFetchData","getCityID","forEach","fetchURL","push","getCitiesID","weatherID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29e27fdf.chunk.js","sourcesContent":["let weatherConfig= {\n    weatherData: {\n        weatherAPI: {\n            apiURL: 'https://openweathermap.org/data/2.5/weather',\n            api30DaysURL: 'https://openweathermap.org/data/2.5/forecast/daily',\n            apiKey: 'b6907d289e10d714a6e88b30761fae22',\n            imageURL: 'https://openweathermap.org/img/wn/'\n        },\n        weatherCities: [\n            {\n                \"id\": 323786,\n                \"name\": \"Ankara\",\n                \"country\": \"TR\",\n                \"coord\": {\n                  \"lon\": 32.854271,\n                  \"lat\": 39.919868\n                }\n            },\n            {\n                \"id\": 745044,\n                \"name\": \"Istanbul\",\n                \"country\": \"TR\",\n                \"coord\": {\n                  \"lon\": 28.949659,\n                  \"lat\": 41.01384\n                }\n            },\n            {\n                \"id\": 311046,\n                \"name\": \"Izmir\",\n                \"country\": \"TR\",\n                \"coord\": {\n                  \"lon\": 27.13838,\n                  \"lat\": 38.412731\n                }\n            },\n            {\n                \"id\": 741098,\n                \"name\": \"Ordu\",\n                \"country\": \"TR\",\n                \"coord\": {\n                  \"lon\": 37.684479,\n                  \"lat\": 40.908581\n                }\n            },\n            {\n                \"id\": 316540,\n                \"name\": \"Diyarbakır\",\n                \"country\": \"TR\",\n                \"coord\": {\n                  \"lon\": 40.23193,\n                  \"lat\": 37.961521\n                }\n            }\n        ]\n    }\n}\n\nexport default weatherConfig;","import React, { Component } from 'react'\nimport weatherConfig from '../config/config'\n\nlet myData= [];\nlet getCityName= '';\nclass Weather30Days extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state= {\n            weatherFetchData: [],\n            myCityName: '',\n            api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n            apiKey: weatherConfig.weatherData.weatherAPI.apiKey,\n            imageURL: weatherConfig.weatherData.weatherAPI.imageURL,\n            isDataOK: false,\n        }\n    }\n\n    get30DaysWeather(){\n        const {cityID} = this.props;\n        if(cityID != \"\")\n        {\n            const{api30DaysURL, apiKey} = this.state;\n            let fetchURL= api30DaysURL + \"?id=\" + cityID + \"&appid=\" + apiKey; \n            \n            fetch(fetchURL).then((response) => {\n                return response.json();\n            }).then((response) => {\n                getCityName= response.city.name;\n                return response.list;\n            }).then((response) => {\n                this.setState({\n                    weatherFetchData: response,\n                    myCityName: getCityName,\n                    isDataOK: true\n                  });\n            }).catch((err) => {\n                console.log('Bir hata oluştu.' + err);\n            });  \n        }\n      }\n\n    componentDidUpdate(){\n        this.get30DaysWeather();\n    }\n\n    setFormatDate(myDate){\n        let formatDate = new Date(myDate*1000);\n        let myDay= formatDate.getDate();\n        if(myDay <= 9)\n            myDay= '0' + myDay;\n        let myMonth= formatDate.getMonth();\n        if(myMonth <= 9)\n            myMonth= '0' + myMonth;\n        let myYear= formatDate.getFullYear();\n        return myDay + '.' + myMonth + '.' + myYear;\n    }\n\n    setFormatTemp(myTemp){\n        var tempLen= myTemp.toString().length;\n        if(tempLen >= 2)\n        {\n            var formatTemp= myTemp.toString().substr(0,2);\n        }\n        return formatTemp;\n    }\n    \n    render() {\n        const {myCityName, isDataOK} = this.state;\n        return (\n            <React.Fragment>\n                {isDataOK ? \n                    <div className=\"col-12 mt-5\">\n                    <h2>{myCityName + ' ili 15 Günlük Hava Durumu'}</h2>\n                    <table className=\"table table-striped\">\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th></th>\n                                <th>Tarih</th>\n                                <th>Sıcaklık</th>\n                                <th>En Yüksek</th>\n                                <th>En Düşük</th>\n                                <th>Nem Oranı</th>\n                                <th>Rüzgar</th>\n                                <th>Bulut</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.weatherFetchData.map((item, index) => {\n                                    return(\n                                        <tr key={index}>\n                                            <td><img src={this.state.imageURL + item.weather[0].icon + '.png'} /></td>\n                                            <td>{this.setFormatDate(item.dt)}</td>\n                                            <td>{this.setFormatTemp(item.temp.day)} <sup>o</sup>C</td>\n                                            <td>{this.setFormatTemp(item.temp.max)} <sup>o</sup>C</td>\n                                            <td>{this.setFormatTemp(item.temp.min)} <sup>o</sup>C</td>\n                                            <td>{item.humidity} <sup> %</sup></td>\n                                            <td>{item.speed }<sup> km/s</sup></td>\n                                            <td>{item.clouds} <sup> %</sup></td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div> : ''}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Weather30Days;\n","import React, { Component } from 'react'\nimport weatherConfig from '../config/config'\nimport Weather30Days from './Weather30Days'\n\nclass WeatherBox extends Component {\n    constructor(props){\n        super(props);\n\n        this.state={\n            imageURL: weatherConfig.weatherData.weatherAPI.imageURL,\n            cityID: '',\n\n        }\n    }\n\n    get30DaysWeather(cityID){\n        this.setState({\n            cityID: cityID\n        });\n        \n    }\n\n    setFormatTemp(myTemp){\n        var tempLen= myTemp.toString().length;\n        if(tempLen >= 2)\n        {\n            var formatTemp= myTemp.toString().substr(0,2);\n        }\n        return formatTemp;\n    }\n    \n    render() {\n        \n        return (\n            <React.Fragment>\n                <div className=\"appWeatherDatas\">\n                    {\n                        this.props.weatherFetchData.map((item, index) => {\n                            return(\n                                <div className=\"weatherItems\" key={index}>\n                                    <div className=\"cityTitle\">\n                                        {item.name}\n                                    </div>\n                                    <div className=\"weatherIcon\">\n                                        <img src={this.state.imageURL + item.weather[0].icon + '.png'} />\n                                        <span className=\"tempData\">{this.setFormatTemp(item.main.temp)} <sup>o</sup>C</span>\n                                    </div>\n                                    <div className=\"tempInfo\">\n                                        <span><b>En Yüksek: </b> {item.main.temp_max} <sup>o</sup>C</span>\n                                        <span><b>En Düşük: </b> {item.main.temp_min}<sup>o</sup>C</span>\n                                    </div>\n                                    <div className=\"extraInfo\">\n                                        <span><b>Rüzgar: </b> {item.wind.speed}<sup> km/s</sup></span>\n                                        <span><b>Nem: </b> {item.main.humidity}<sup> %</sup></span>\n                                        <span><b>Bulut: </b> {item.clouds.all}<sup> %</sup></span>\n                                    </div>\n                                    <div className=\"btn30Days\">\n                                        <button onClick={() => this.get30DaysWeather(item.id)}>15 Günlük Hava Durumu İçin Tıklayın</button>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <Weather30Days cityID={this.state.cityID} />\n            </React.Fragment>\n            \n        )\n    }\n}\n\nexport default WeatherBox;","import React, { Component } from 'react'\nimport './App.css';\nimport WeatherBox from './components/WeatherBox';\nimport weatherConfig from './config/config'\n\nlet myData= [];\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n      apiURL: weatherConfig.weatherData.weatherAPI.apiURL,\n      api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n      apiKey: weatherConfig.weatherData.weatherAPI.apiKey,\n      imageURL: weatherConfig.weatherData.weatherAPI.imageURL,\n      cities: weatherConfig.weatherData.weatherCities,\n      weatherFetchData: [],\n      weather30DayFetchData: [],\n      getCityID: '',\n      getCityName: ''\n    }\n  }\n\n  getCitiesID(){\n    const {cities}= this.state;\n    cities.forEach((city) => {\n        const{apiURL, apiKey} = this.state;\n        let fetchURL= apiURL + \"?id=\" + city.id + \"&appid=\" + apiKey; \n\n        fetch(fetchURL).then((response) => {\n            return response.json();\n        }).then((response) => {\n            myData.push(response);\n            this.setState({\n                weatherFetchData: myData\n            })\n        }).catch((err) => {\n            console.log('Bir hata oluştu.' + err);\n        });\n    });\n  }\n\n  componentDidMount(){\n      this.getCitiesID();\n  }\n  \n\n  render(){\n    return (\n      <div className=\"App\">\n        <WeatherBox weatherFetchData={this.state.weatherFetchData} weatherID={this.state.getCityID} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}