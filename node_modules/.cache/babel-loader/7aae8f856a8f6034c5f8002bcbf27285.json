{"ast":null,"code":"var _jsxFileName = \"/Users/recepteksan/Code/_Test/_React/ReactTutorial/reactweatherapi/src/components/Weather30Days.js\";\nimport React, { Component } from 'react';\nimport weatherConfig from '../config/config';\nlet myData = [];\n\nclass Weather30Days extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherFetchData: [],\n      myCityName: '',\n      api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n      apiKey: weatherConfig.weatherData.weatherAPI.apiKey\n    };\n  }\n\n  get30DaysWeather() {\n    const cityID = this.props.cityID;\n    let getCityName = \"\";\n\n    if (cityID != \"\") {\n      const _this$state = this.state,\n            api30DaysURL = _this$state.api30DaysURL,\n            apiKey = _this$state.apiKey;\n      let fetchURL = api30DaysURL + \"?id=\" + cityID + \"&appid=\" + apiKey;\n      fetch(fetchURL).then(response => {\n        return response.json();\n      }).then(response => {\n        getCityName = response.city.name;\n        return response.list;\n      }).then(response => {}).catch(err => {\n        console.log('Bir hata oluştu.' + err);\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(\"OK\");\n    this.get30DaysWeather();\n  }\n\n  render() {\n    const myCityName = this.state.myCityName;\n    return React.createElement(\"div\", {\n      className: \"col-12 mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, myCityName != '' ? myCityName + ' ili 30 Günlük Hava Durumu' : ''), this.state.weatherFetchData.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, item.temp.day);\n    }));\n  }\n\n}\n\nexport default Weather30Days;","map":{"version":3,"sources":["/Users/recepteksan/Code/_Test/_React/ReactTutorial/reactweatherapi/src/components/Weather30Days.js"],"names":["React","Component","weatherConfig","myData","Weather30Days","constructor","props","state","weatherFetchData","myCityName","api30DaysURL","weatherData","weatherAPI","apiKey","get30DaysWeather","cityID","getCityName","fetchURL","fetch","then","response","json","city","name","list","catch","err","console","log","componentDidUpdate","render","map","item","index","temp","day"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,IAAIC,MAAM,GAAE,EAAZ;;AACA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAElCI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACRC,MAAAA,gBAAgB,EAAE,EADV;AAERC,MAAAA,UAAU,EAAE,EAFJ;AAGRC,MAAAA,YAAY,EAAER,aAAa,CAACS,WAAd,CAA0BC,UAA1B,CAAqCF,YAH3C;AAIRG,MAAAA,MAAM,EAAEX,aAAa,CAACS,WAAd,CAA0BC,UAA1B,CAAqCC;AAJrC,KAAZ;AAMH;;AAEDC,EAAAA,gBAAgB,GAAE;AAAA,UACPC,MADO,GACG,KAAKT,KADR,CACPS,MADO;AAEd,QAAIC,WAAW,GAAC,EAAhB;;AACA,QAAGD,MAAM,IAAI,EAAb,EACA;AAAA,0BACkC,KAAKR,KADvC;AAAA,YACUG,YADV,eACUA,YADV;AAAA,YACwBG,MADxB,eACwBA,MADxB;AAEI,UAAII,QAAQ,GAAEP,YAAY,GAAG,MAAf,GAAwBK,MAAxB,GAAiC,SAAjC,GAA6CF,MAA3D;AAEAK,MAAAA,KAAK,CAACD,QAAD,CAAL,CAAgBE,IAAhB,CAAsBC,QAAD,IAAc;AAC/B,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,OAFD,EAEGF,IAFH,CAESC,QAAD,IAAc;AAClBJ,QAAAA,WAAW,GAAEI,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AACA,eAAOH,QAAQ,CAACI,IAAhB;AACH,OALD,EAKGL,IALH,CAKSC,QAAD,IAAc,CAErB,CAPD,EAOGK,KAPH,CAOUC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,GAAjC;AACH,OATD;AAUH;AACF;;AAEDG,EAAAA,kBAAkB,GAAE;AAChBF,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKd,gBAAL;AACH;;AAEHgB,EAAAA,MAAM,GAAG;AAAA,UACErB,UADF,GACgB,KAAKF,KADrB,CACEE,UADF;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,UAAU,IAAI,EAAd,GAAmBA,UAAU,GAAG,4BAAhC,GAA+D,EAApE,CADJ,EAGQ,KAAKF,KAAL,CAAWC,gBAAX,CAA4BuB,GAA5B,CAAgC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7C,aACI;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,IAAI,CAACE,IAAL,CAAUC,GADf,CADJ;AAKH,KAND,CAHR,CADJ;AAcH;;AAtDiC;;AAyDtC,eAAe/B,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport weatherConfig from '../config/config'\n\nlet myData= []\nclass Weather30Days extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state= {\n            weatherFetchData: [],\n            myCityName: '',\n            api30DaysURL: weatherConfig.weatherData.weatherAPI.api30DaysURL,\n            apiKey: weatherConfig.weatherData.weatherAPI.apiKey\n        }\n    }\n\n    get30DaysWeather(){\n        const {cityID} = this.props;\n        let getCityName=\"\";\n        if(cityID != \"\")\n        {\n            const{api30DaysURL, apiKey} = this.state;\n            let fetchURL= api30DaysURL + \"?id=\" + cityID + \"&appid=\" + apiKey; \n            \n            fetch(fetchURL).then((response) => {\n                return response.json();\n            }).then((response) => {\n                getCityName= response.city.name;\n                return response.list;\n            }).then((response) => {\n                \n            }).catch((err) => {\n                console.log('Bir hata oluştu.' + err);\n            });  \n        }\n      }\n\n      componentDidUpdate(){\n          console.log(\"OK\");\n          this.get30DaysWeather();\n      }\n    \n    render() {\n        const {myCityName} = this.state;\n        return (\n            <div className=\"col-12 mt-5\">\n                <h2>{myCityName != '' ? myCityName + ' ili 30 Günlük Hava Durumu' : ''}</h2>\n                {\n                    this.state.weatherFetchData.map((item, index) => {\n                        return(\n                            <div key={index}>\n                                {item.temp.day}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Weather30Days;\n"]},"metadata":{},"sourceType":"module"}